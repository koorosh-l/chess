(define-module (chess chess)
  #:use-module (srfi srfi-9)
  #:use-module (srfi srfi-43)
  #:use-module (ice-9 regex)
  #:use-module (ice-9 match)
  #:export (board? piece?))

;;square action
(define checker-template #(#(br bh bb bq bk bb bh br)
			   #(bp bp bp bp bp bp bp bp)
			   #(ee ee ee ee ee ee ee ee)
			   #(ee ee ee ee ee ee ee ee)
			   #(ee ee ee ee ee ee ee ee)
			   #(ee ee ee ee ee ee ee ee)
			   #(wp wp wp wp wp wp wp wp)
			   #(wr wh wb wq wk wb wh wr)))
(define-record-type <piece>
  (_make-piece name str-name move)
  piece?
  (name piece-get-name)
  (str-name piece-get-str-name)
  (move piece-get-move))
(define-public make-piece _make-piece)
(define-record-type <board>
  (_make-board checker turn move-no history)
  board?
  (checker board-get-checker board-set-checker!)
  (turn board-get-turn board-set-turn!)
  (move-no board-get-move-no board-set-move-no!)
  (history board-get-history board-set-history!))
(define-public make-board _make-board)
(define (symbol->piece ))

(define-public (creat-default-checker)
  (vector (apply vector '(br bh bb bq bk bb bh br))
	  (apply vector '(bp bp bp bp bp bp bp bp))
	  (apply vector '(ee ee ee ee ee ee ee ee))
	  (apply vector '(ee ee ee ee ee ee ee ee))
	  (apply vector '(ee ee ee ee ee ee ee ee))
	  (apply vector '(ee ee ee ee ee ee ee ee))
	  (apply vector '(wp wp wp wp wp wp wp wp))
	  (apply vector '(wr wh wb wq wk wb wh wr)))) ;;donzo
(define-public (creat-board) (make-board (creat-default-checker)
					 'white 0 (list)))
(define-public (checker-set! ch obj i j) (vector-set! (vector-ref ch i) j obj))
(define-public (checker-ref  ch i j) (vector-ref (vector-ref ch i) j))
(define-public (board-cord-map! f ch) ;;(f board piece cord)
  (do ((i 0 (1+ i)))
      ((not (< i 8)))
    (do ((j 0 (1+ j)))
	((not (< j 8)))
      (checker-set! ch
		    (f (checker-ref ch i j)
		        i j)
		     i j))))
(define-public (board-cord-for-each f ch) ;;(f board piece cord)
  (do ((i 0 (1+ i)))
      ((not (< i 8)))
    (do ((j 0 (1+ j)))
	((not (< j 8)))
      (f ch (checker-ref ch  i j)
	 i j))))
(define-public (next-moves board)
  (board-cord-for-each (Î» )
		       ))
(define-public (stalemate? board)
  )
